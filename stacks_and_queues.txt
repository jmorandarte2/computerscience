1.	 What is the main difference between a stack and a queue?
        A: 
     Stack follows a LIFO order which the last object to arrive is the first one to leave. While a queue follows a FIFO order which the object the arrives first is also the one that leaves first.

2.	 What are the similarities between stacks and queues?
 	 A: 
     The similarities with stacks and queues is that both of them are good data structures that allows objects be inserted and be removed but its a a matter of which object gets to be removed first. 

3.	 Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?
 	 A: 
     I would use LIFO order for both UNDO and REDO options since both of them because it first deletes the data you entered last. In UNDO, whatever the last object you entered is also the first thing that gets deleted and for REDO, whatever the last thing you entered is also the thing its copies.

PROGRAMMING QUESTIONS
1.	Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".
A:
function reverse(original){
  var stack = [];
  for (let i = 0; i<original.length; i++){
    stack.push(original[i]);
  }
  
  var reversed = "";
  while (stack != ""){
    reversed += stack.pop();
  }
  return reversed;
}


2.	Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.
A: 
var queue = []

queue.push(1,2,3)
queue.push(4,5,6)
queue.shift()
queue.pop()

console.log (queue)

3.	Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.
A:
class Queue{
  constructor(){
    this.item =[];
  }
  
  enqueue(element){
    this.item.push(element);
  }
  
  dequeue(){
    return this.item.shift();
  }
  
  front(){
    return this.item[0]
  }
  
  isEmpty(){
    return this.item.length == 0
  }
  
  print(){
    var items= ""
    for (let i =0; i<this.item.length; i++)
      items += this.item[i];
    return items
  }
}

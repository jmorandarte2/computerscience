Exercises
1.	In your own words, explain what clean code is and why it is important.
A: 
Clean code means that the code written by the developer is readable, understandable and follows the best practice of coding. It is important to have a clean code so that other developers on the team would be able to read, understand the code and they would be able to edit it easily. It will also important for easy debugging.


2.	Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.
A: 
If code is written incorrectly or not in acceptable standard, few problems will occur such as misunderstanding. Developers on the team will misinterpret the code or they will have hard time understanding the code which will take up too much time of the person reading it thus making it too long to finish the project. Other problem is that there will be difficulty in debugging the code if it is not following the acceptable standard. 


3.	Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.
A: 
The code is clean. Based on my understanding, if there is already an input for “F” and “C” on html, the code is understandable with the comments. But if there is no input on the html for “F” and “C”, I think the code does not make sense and the function do should only be accepting one value to convert either fahrenheit or Celsius.

4.	Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.
A: 
The code is note clean, it does not follow acceptable standard. Code should be:
  FUNCTION percentCalculation(sum, total)
      IF total is not equal to 0 THEN
         SET percentage to sum / total * 100
         RETURN percentage
      ELSE
         PRINT "Sorry, cannot divide by 0"
  END IF
  END FUNCTION

5.	Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a.	 The following function prints the subtotal of a customer's transaction and receives payment accordingly.
A:
FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   SET total to "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF

   RETURN total and paymentType
END FUNCTION


b.	The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
    IF guest.accountActive is true and guest.hasOverdueBooks is false and guest.outstandingFees is equal to 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
    ELSE
           PRINT "Unable to check out book."
    END IF
END FUNCTION 


c.	 The following class is a code snippet that should support the transactions a customer can perform at an ATM.

A:
CLASS BankAccount
 
 FUNCTION displayBalance
    PRINT balance
 END FUNCTION
END CLASS

CLASS amountDeposit
 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION
END CLASS


CLASS amountWithdraw
 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION
END CLASS


CLASS creditCard
 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END IF
 END FUNCTION
END CLASS


CLASS status
 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END IF
 END FUNCTION
END CLASS


 ....
 ....
 ....

END


6.	Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.
A:
function num(arr){
  var total=0;
  for (let i=0; i<arr.length;i++){
    var total = total += arr[i];
  }
  var squareRoot = Math.sqrt(total)

  if (Number.isInteger(squareRoot)){
    return squareRoot
  } else {return total}
}

7.	 Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.
A:
function num(arr) {
    for(let i = 0; i < arr.length; i++) {
       for(let x = i; x < arr.length; x++ ) {
            if (i != x & arr[i] == arr[x]){
              return true;
        } 
     }
   }  
  return false
}

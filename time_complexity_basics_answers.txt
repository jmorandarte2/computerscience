Exercises

1.	What is time complexity and what is its relation to algorithms?
A:
Time complexity is function that estimates the time it takes for a program to execute or a process of finding out how long it takes for a program to complete it function. It also determines how many operations a program does. It relates to algorithm because having an efficient algorithm, a program should be able to executed effectively in a short amount of time and least number of operation as possible and time complexity helps it determine just that.

2.	What is runtime?
A:
Runtime is a physical time duration of an algorithm.

3.	How is the runtime of an algorithm calculated?
A:
By using Big O function notation

4.	Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.
A:
a.	Constant Growth Rate
b.	Logarithmic Growth Rate
c.	Linear Growth Rate
d.	Log-Linear Growth Rate
e.	Quasilinear Growth Rate
f.	Quadratic Growth Rate
g.	Exponential Growth Rate

5.	Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.
A:
Logarithmic Growth Rate 
Ex: Searching name of a patient on an hospital with a list of patient whose names are sort alphabetically.


6.	Determine the time complexity of the following snippet of code. It is commonly known as a linear search.
A:
function linearSearch(array, target){
 for (let i = 0; i < array.length; i++){
   if (array[i] == target){
     return true
   }
 }
  return false;
}

7.	Determine the time complexity of the following snippet of code.
A:
function foo(array){
 for (let i = 0; i < array.length; i++){
   for (let j = 0; j < array.length; j++){
     return "Hello"
   }
 }
}

8.	Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.
A:
function fibonacci(number){

  if (number < 1){
    return error
  } else if (number <= 2 ){
    return 1
  } else {
    var twoBack = fibonacci(number-2);
    var oneBack = fibonacci(number-1);
    return twoBack + oneBack
  } 
}

9.	Out of the code snippets you just saw, which is the most time efficient?
A:
The first snippet which is also called linear search.
